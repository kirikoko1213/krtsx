---
description:
globs:
alwaysApply: false
---
# 组件架构指南

## 主要组件结构

### 布局组件
- [App.vue](mdc:src/App.vue) - 应用根组件，包含主题提供和路由
- [Layout.vue](mdc:src/components/Layout.vue) - 主布局组件，侧边栏和内容区域

### 页面组件
- [Dashboard.vue](mdc:src/components/Dashboard.vue) - 仪表板页面，系统信息和天气
- [ScriptManager.vue](mdc:src/components/ScriptManager.vue) - 脚本管理页面
- [Settings.vue](mdc:src/components/Settings.vue) - 设置页面，包含背景、天气、界面设置

### 对话框组件
- [ScriptDialog.vue](mdc:src/components/ScriptDialog.vue) - 脚本编辑/添加对话框

## 组件设计原则

### 1. Composition API 优先
所有组件都使用 Vue 3 的 Composition API：
```typescript
<script setup lang="ts">
import { ref, reactive, computed, onMounted } from 'vue'
// 组件逻辑
</script>
```

### 2. TypeScript 类型安全
- 使用 `defineProps<T>()` 定义 props 类型
- 使用 `defineEmits<T>()` 定义事件类型
- 为所有数据结构定义接口

### 3. 主题适配
- 所有样式使用 CSS 变量
- 支持多主题切换
- 响应式设计

### 4. IPC 通信
- 通过 `window.electronAPI` 与主进程通信
- 异步操作使用 async/await
- 错误处理和用户反馈

## 状态管理
- 使用 Vue 3 的响应式系统（ref/reactive）
- 组合式函数封装复用逻辑
- 本地存储通过 Electron IPC 管理

## 样式规范
- 使用 scoped CSS
- 遵循 BEM 命名规范
- 响应式布局（flexbox/grid）
- 统一的间距和圆角
